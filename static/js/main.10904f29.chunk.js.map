{"version":3,"sources":["config.js","FutureForecast.js","HourlyForecast.js","CurrentInfo.js","CurrentWeather.js","App.js","index.js"],"names":["config","url1","url2","url3","api_key","FutureForecast","props","data","map","day","weekday","Date","dt","toDateString","imgUrl","weather","icon","class","id","substring","src","alt","temp","max","min","HourlyForecast","labels","datasets","hour","push","label","color","fill","borderColor","backgroundColor","options","legend","fontColor","scales","xAxes","ticks","yAxes","days","months","time","month","getMonth","date","getDate","getDay","getHours","hoursIn12HrFormat","minutes","getMinutes","ampm","CurrentInfo","current","daily","className","humidity","pressure","wind_speed","night","hourly","CurrentWeather","useState","apiData","setApidata","lat","setLat","long","setLong","city","setCity","FetchCitylonLat","fetch","then","response","json","coord","lon","useEffect","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","fetchData","error","notify","toast","e","a","preventDefault","onSubmit","type","placeholder","maxLength","value","onChange","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10904f29.chunk.js","sourcesContent":["let config = {\r\n    url1: \"https://api.openweathermap.org/data/2.5/onecall?lat=\",\r\n  \r\n    url2: \"&lon=\",\r\n    url3: \"&exclude=minutely,alerts&units=metric&appid=\",\r\n    api_key: \"9c689fc1108c4933484e28c91fb48a9d\",\r\n  };\r\n  export default config;\r\n  ","import React from \"react\";\r\n//component to show the future forecast(min&max temperature) of 7 future days, plus the current day\r\nfunction FutureForecast(props) {\r\n  return (\r\n    <>\r\n      {props.data.map((day) => {\r\n        const weekday = new Date(day.dt * 1000).toDateString();\r\n\r\n        const imgUrl = `http://openweathermap.org/img/wn/${day.weather[0].icon}@2x.png`;\r\n        return (\r\n          <div class=\"weather-forecast\" id=\"weather-forecast\">\r\n            <div class=\"weather-forecast-item\">\r\n              <div class=\"day\">{weekday.substring(0, 4)}</div>\r\n              <img src={imgUrl} alt=\"weather icon\" class=\"w-icon\" />\r\n              <div class=\"temp\">Max - {day.temp.max}&#176; C</div>\r\n              <div class=\"temp\">Min - {day.temp.min}&#176; C</div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FutureForecast;\r\n","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n//component to show the hourly graph\r\nfunction HourlyForecast(props) {\r\n  let labels = [];\r\n  let datasets = [];\r\n\r\n  props.data.map((hour) => {\r\n    labels.push(new Date(hour.dt * 1000).toDateString().substring(0, 11));\r\n    datasets.push(hour.temp);\r\n  });\r\n\r\n  const data = {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: \"Hourly Temperature in Degree Celcius\",\r\n        data: datasets,\r\n        color: \"#fff\",\r\n        fill: true,\r\n        borderColor: \"#fff\",\r\n        backgroundColor: \"rgba(225, 225, 235, 0.1)\",\r\n      },\r\n    ],\r\n  };\r\n  const options = {\r\n    legend: {\r\n      fontColor: \"blue\",\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          ticks: {\r\n            fontColor: \"blue\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            fontColor: \"blue\",\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  return <Line data={data} options={options} />;\r\n}\r\n\r\nexport default HourlyForecast;\r\n","import React from \"react\";\r\nimport FutureForecast from \"./FutureForecast\";\r\nimport HourlyForecast from \"./HourlyForecast\";\r\n/*  Component to show the Weather data using different*/\r\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\nconst months = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\",\r\n  \"May\",\r\n  \"Jun\",\r\n  \"Jul\",\r\n  \"Aug\",\r\n  \"Sep\",\r\n  \"Oct\",\r\n  \"Nov\",\r\n  \"Dec\",\r\n];\r\n\r\n//preparing the data\r\nconst time = new Date();\r\nconst month = time.getMonth();\r\nconst date = time.getDate();\r\nconst day = time.getDay();\r\nconst hour = time.getHours();\r\nconst hoursIn12HrFormat = hour >= 13 ? hour % 12 : hour;\r\nconst minutes = time.getMinutes();\r\nconst ampm = hour >= 12 ? \"PM\" : \"AM\";\r\n\r\nfunction CurrentInfo(props) {\r\n  const current = props.data.current;\r\n  const daily = props.data.daily;\r\n  const imgUrl = `http://openweathermap.org/img/wn/${current.weather[0].icon}@2x.png`;\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <div className=\"current-info\">\r\n          <div class=\"date-container\">\r\n            <div class=\"time\" id=\"time\">\r\n              <div> {current.temp}&#176;C</div>\r\n              <span>\r\n                {\" \"}\r\n                <img src={imgUrl} alt=\"weather icon\" />\r\n              </span>\r\n            </div>\r\n            <div class=\"date\" id=\"date\">\r\n              {days[day] + \", \" + date + \" \" + months[month]}\r\n              <div></div>\r\n              {(hoursIn12HrFormat < 10\r\n                ? \"0\" + hoursIn12HrFormat\r\n                : hoursIn12HrFormat) +\r\n                \":\" +\r\n                (minutes < 10 ? \"0\" + minutes : minutes) +\r\n                \" \" +\r\n                ampm}\r\n            </div>\r\n\r\n            <div class=\"others\" id=\"current-weather-items\">\r\n              <div class=\"weather-item\">\r\n                <div>Humidity</div>\r\n                <div>{current.humidity}%</div>\r\n              </div>\r\n              <div class=\"weather-item\">\r\n                <div>Pressure</div>\r\n                <div>{current.pressure}</div>\r\n              </div>\r\n              <div class=\"weather-item\">\r\n                <div>Wind Speed</div>\r\n                <div>{current.wind_speed}</div>\r\n              </div>\r\n              <div class=\"weather-item\">\r\n                <div>Night</div>\r\n                <div>{daily[0].temp.day}&#176;C</div>\r\n              </div>\r\n              <div class=\"weather-item\">\r\n                <div>Day</div>\r\n                <div>{daily[0].temp.night}&#176;C</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"place-container\">\r\n            <div className=\"hourly-forecast\">\r\n              <HourlyForecast data={props && props.data && props.data.hourly} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"future-forecast\">\r\n        <FutureForecast data={props && props.data && props.data.daily} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default CurrentInfo;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport config from \"./config\";\r\nimport CurrentInfo from \"./CurrentInfo\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction CurrentWeather() {\r\n  const [apiData, setApidata] = useState();\r\n  const [lat, setLat] = useState();\r\n  const [long, setLong] = useState();\r\n  const [city, setCity] = useState(\"\");\r\n\r\n  //api to get city coords\r\n  let api1 = \"https://api.openweathermap.org/data/2.5/weather?q=\";\r\n  let api2 = \"&appid=\";\r\n\r\n  //to fetch City coords\r\n  const FetchCitylonLat = () => {\r\n    return fetch(`${api1}${city}${api2}${config.api_key}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        return {\r\n          lat: data?.coord?.lat,\r\n          lon: data?.coord?.lon,\r\n        };\r\n      });\r\n  };\r\n\r\n  //to get the Location from the user, if user denies, it will take default coords\r\n  //if the user reject the location permission then it will set a hard-coded coord values which are of Delhi\r\n  useEffect(() => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      function (position) {\r\n        position.coords.latitude && setLat(position.coords.latitude);\r\n        position.coords.longitude && setLong(position.coords.longitude);\r\n        fetchData({\r\n          lat: position.coords.latitude,\r\n          lon: position.coords.longitude,\r\n        });\r\n      },\r\n      function (error) {\r\n        notify();\r\n        setLat(28.7041);\r\n        setLong(77.1025);\r\n        fetchData({\r\n          lat: 28.7041,\r\n          lon: 77.1025,\r\n        });\r\n      }\r\n    );\r\n  }, []);\r\n\r\n  //fetch the data (current, daily and hourly)\r\n  const fetchData = (coord = {}) => {\r\n    fetch(\r\n      `${config.url1}${coord.lat || lat}${config.url2}${coord.lon || long}${\r\n        config.url3\r\n      }${config.api_key}`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        setApidata(data);\r\n      });\r\n  };\r\n\r\n  const notify = () =>\r\n    toast(\r\n      \"Oops! Location not accessible. You will see default weather of as per Delhi coords\"\r\n    );\r\n\r\n  //function to handle submit of the city(to fetch thr new data as per the city coords)\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (city) {\r\n      const coord = await FetchCitylonLat();\r\n      fetchData(coord);\r\n      return;\r\n    }\r\n\r\n    fetchData();\r\n  }\r\n\r\n  return apiData ? (\r\n    <div className=\"search-bar\">\r\n      <ToastContainer />\r\n      <span>\r\n        <form onSubmit={handleSubmit}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Enter City\"\r\n            maxLength=\"50\"\r\n            value={city}\r\n            onChange={(e) => setCity(e.target.value)}\r\n          />\r\n          <button type=\"submit\">Get Forecast</button>\r\n        </form>\r\n      </span>\r\n\r\n      <div>\r\n        <CurrentInfo data={apiData} />\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    \"\"\r\n  );\r\n}\r\n\r\nexport default CurrentWeather;\r\n","import CurrentWeather from \"./CurrentWeather\";\nimport \"./App.css\";\nfunction App() {\n  \n\n  return (\n    <div className=\"App\">\n      <CurrentWeather />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}